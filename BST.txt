// Node class representing a node in a Binary Search Tree (BST)
class Node {
    int key;
    Node left;
    Node right;

    // Constructor to initialize a node with a given key
    public Node(int key) {
        this.key = key;
        this.left = null;
        this.right = null;
    }
}

// BinarySearchTree class managing the operations of a BST
class BinarySearchTree {
    private Node root; // Reference to the root of the BST

    // Constructor to initialize an empty BST
    public BinarySearchTree() {
        this.root = null;
    }

    // Method to insert a new node with a given key into the BST
    public void insert(int key) {
        root = insertNode(root, key); // Call the recursive helper method
    }

    // Recursive helper method to insert a new node into the BST
    private Node insertNode(Node root, int key) {
        if (root == null) {
            return new Node(key); // Create a new node if the current node is null
        }

        if (key < root.key) {
            root.left = insertNode(root.left, key); // Recursively insert into the left subtree
        } else if (key > root.key) {
            root.right = insertNode(root.right, key); // Recursively insert into the right subtree
        }

        return root; // Return the modified root
    }

    // Method to delete a node with a given key from the BST
    public void delete(int key) {
        root = deleteNode(root, key); // Call the recursive helper method
    }

    // Recursive helper method to delete a node with a given key from the BST
    private Node deleteNode(Node root, int key) {
        if (root == null) {
            return null; // Return null if the current node is null (base case)
        }

        if (key < root.key) {
            root.left = deleteNode(root.left, key); // Recursively delete from the left subtree
        } else if (key > root.key) {
            root.right = deleteNode(root.right, key); // Recursively delete from the right subtree
        } else {
            // Case when the node to be deleted has one or no children
            if (root.left == null) {
                return root.right; // Return the right child if no left child
            } else if (root.right == null) {
                return root.left; // Return the left child if no right child
            }

            // Case when the node to be deleted has two children
            root.key = minValue(root.right); // Replace the node with the inorder successor
            root.right = deleteNode(root.right, root.key); // Delete the inorder successor
        }

        return root; // Return the modified root
    }

    // Helper method to find the minimum value in a subtree (used in deleteNode)
    private int minValue(Node root) {
        int minValue = root.key;
        while (root.left != null) {
            minValue = root.left.key;
            root = root.left;
        }
        return minValue;
    }

    // Method to display the elements of the BST
    public void display() {
        displayTree(root); // Call the recursive helper method
    }

    // Recursive helper method to perform inorder traversal and display the elements
    private void displayTree(Node root) {
        if (root != null) {
            displayTree(root.left); // Traverse the left subtree
            System.out.print(root.key + " "); // Display the current node
            displayTree(root.right); // Traverse the right subtree
        }
    }
}

// Main class to demonstrate the functionality of the Binary Search Tree
public class Main {
    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree(); // Create a new BST

        // Insert elements into the BST
        bst.insert(50);
        bst.insert(30);
        bst.insert(20);
        bst.insert(40);
        bst.insert(70);
        bst.insert(60);
        bst.insert(80);

        System.out.print("BST: ");
        bst.display(); // Display the elements of the BST (Inorder traversal)
        System.out.println();

        // Delete elements from the BST
        bst.delete(20);
        bst.delete(70);

        System.out.print("BST after deletion: ");
        bst.display(); // Display the modified BST
        System.out.println();
    }
}
