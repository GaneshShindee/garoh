class Queue {
    private int[] queueArray;
    private int front;
    private int rear;
    private int capacity;
    private int size;

    // Constructor to initialize the queue with a given capacity
    public Queue(int capacity) {
        this.capacity = capacity;
        this.queueArray = new int[capacity];
        this.front = 0;
        this.rear = -1;
        this.size = 0;
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Check if the queue is full
    public boolean isFull() {
        return size == capacity;
    }

    // Add an element to the rear of the queue
    public void enqueue(int data) {
        if (isFull()) {
            throw new IllegalStateException("Queue is full");
        }
        rear = (rear + 1) % capacity;
        queueArray[rear] = data;
        size++;
    }

    // Remove and return the front element of the queue
    public int dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        int data = queueArray[front];
        front = (front + 1) % capacity;
        size--;
        return data;
    }

    // Display the elements of the queue
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
        } else {
            int i = front;
            int count = 0;
            while (count < size) {
                System.out.print(queueArray[i] + " ");
                i = (i + 1) % capacity;
                count++;
            }
            System.out.println();
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Queue queue = new Queue(5);
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        queue.display();  // Output: 1 2 3
        queue.dequeue();
        queue.display();  // Output: 2 3
    }
}
